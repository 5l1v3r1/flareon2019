#include <stdio.h>
#include <windows.h>

#include <stdint.h>
#include <iostream>
#include "rtlcompress.h"

#define CRYPTO_DLL "crypto.dll"

HMODULE g_CryptoDll = nullptr;

int64_t (__fastcall *crypto_e)(BYTE *in_buf) = nullptr;
int64_t (__fastcall *rc4_init)(BYTE *ctx, BYTE *key, int key_size) = nullptr;
int64_t (__fastcall *rc4_decrypt)(BYTE *ctx, BYTE *in_buf, BYTE *out_buf, unsigned int size) = nullptr;

typedef struct {
    DWORD in_size;
    BYTE* in_buf;
    uint64_t out_size;
    BYTE* out_buf;
} c_buf;

bool init_func()
{
    crypto_e = (int64_t(__fastcall *)(BYTE *)) GetProcAddress(g_CryptoDll, "e");
    if (!crypto_e) return false;

    rc4_init = (__int64(__fastcall *)(BYTE *, BYTE *, int))((ULONG_PTR)g_CryptoDll + 0x21c0);
    rc4_decrypt = (__int64(__fastcall *)(BYTE *, BYTE *, BYTE *, unsigned int))((ULONG_PTR)g_CryptoDll + 0x22d0);
    return true;
}

int64_t call_crypto(c_buf* buf)
{
    if (!buf) return -1;
    std::cout << "Call crypto: " << "\n";

    int64_t ret = crypto_e((BYTE*)buf);

    std::cout << "Finished with res: " << ret << "\n";
    std::cout << "in_size:  " << std::hex << buf->in_size << std::endl;
    std::cout << "out_size: " << std::hex << buf->out_size << std::endl;
    std::cout << "crypto ret: " << ret << "\n";
    return ret;
}

bool dump_file(char *filename, BYTE *buf, size_t buf_size)
{
    FILE *fp = fopen(filename, "wb");
    if (fp) {
        fwrite(buf, 1, buf_size, fp);
        fclose(fp);
        std::cout << "Dumped to: " << filename << std::endl;
        return true;
    }
    return false;
}

size_t call_rc4(BYTE *key, unsigned int key_size, BYTE *buf, unsigned int buf_size)
{
    BYTE ctx[0x255] = { 0 };
    rc4_init(ctx, key, key_size);
    const size_t out_len = rc4_decrypt(ctx, buf, buf, buf_size);
    return out_len;
}

ULONG _decrypt(BYTE *buf, unsigned int buf_size, BYTE *key, size_t key_size, char *out_file)
{
    size_t out1_size = call_rc4((BYTE*)key, key_size, buf, buf_size);

    const int uncompBufferLen = buf_size * 10;
    BYTE *uncompBuffer = new BYTE[uncompBufferLen];
    memset(uncompBuffer, 0, uncompBufferLen);

    ULONG real_out_size = uncompBufferLen;
    BOOL is_ok = decompress_buffer((char*)buf, out1_size, uncompBuffer, uncompBufferLen, &real_out_size);
    if (!is_ok) {
        delete[]uncompBuffer;
        return 0;
    }
    std::cout << "Uncompressed size:" << std::hex << real_out_size << std::endl;
    dump_file(out_file, uncompBuffer, real_out_size);
    delete[]uncompBuffer;
    return real_out_size;
}

bool decrypt(BYTE *buf, unsigned int buf_size, char *out_file)
{
    char username_buffer[0x100] = { 0 };
    DWORD username_size = 0x100;
    GetUserNameA(username_buffer, &username_size);

    BOOL is_ok = _decrypt(buf, buf_size, (BYTE*) username_buffer, username_size, out_file);
    return is_ok;
}

bool decrypt_pass_from_packet()
{
    char packet[] = { /* Packet 25451 */
        0x34, 0xdb, 0xc7, 0xff,
        0x54, 0xdd, 0x16, 0x50, 0x09, 0x9e, 0x44, 0xad,
        0x39, 0xd3, 0xb7, 0xc2, 0x80, 0x76, 0xb1, 0xd5,
        0xfa, 0x4e, 0x2b, 0xe7, 0x2a, 0xb0, 0x7b, 0x28,
        0x83, 0xf0, 0x51, 0xff, 0x7b, 0xc0, 0x0a, 0xc0,
        0xd2, 0x21, 0xd7, 0xb6, 0x71, 0x90, 0x8b, 0xde,
        0xd5, 0xb9, 0x5a, 0x03, 0x87, 0x6e, 0x5b, 0x8f,
        0x17, 0xc2, 0x09, 0x17, 0x01, 0x63, 0x8b, 0x77,
        0x61, 0x57, 0x36, 0x9f, 0xea, 0xe3, 0xdd, 0x69,
        0xe4, 0xaf, 0x80, 0x7b, 0x2e, 0x98, 0xf0, 0xe1,
        0xa5, 0x7b, 0xc9, 0x1a, 0xa8, 0x98, 0x0d, 0x25,
        0x58, 0x90, 0x9a, 0x75, 0x58, 0x7c, 0x5c, 0xe3,
        0xdc, 0x25, 0xc3, 0x3e, 0xdd, 0x06, 0xcc, 0x98,
        0x50, 0xd0, 0xe6, 0x8f, 0xeb, 0x0f, 0x07, 0xa1 };

    BYTE *buf = (BYTE *)packet;
    size_t packet_size = sizeof(packet);

    char username_buffer[] = "FLARE ON 2019";
    DWORD username_size = strlen(username_buffer) + 1;

    _decrypt((BYTE*)buf, packet_size, (BYTE*)username_buffer, username_size, "keylog.txt");
    return true;
}

bool decrypt_kdb_from_packet()
{
    char packet[] = { /* Packet 28282 */
        0x54, 0xd2, 0xc7, 0xb3,
        0xfd, 0x1a, 0xe2, 0x15, 0xb6, 0xb4, 0x85, 0xad,
        0x5b, 0xb1, 0xd6, 0xb1, 0xe1, 0x56, 0x9f, 0xf5,
        0xfa, 0xcf, 0x39, 0x60, 0x40, 0xaa, 0x7a, 0x17,
        0xce, 0xf2, 0x45, 0x9b, 0x0b, 0x6a, 0x93, 0x2c,
        0x23, 0x40, 0xa4, 0xe7, 0x94, 0x02, 0x3d, 0x66,
        0xf0, 0x7d, 0x04, 0x77, 0xc5, 0xd4, 0x43, 0x62,
        0x6e, 0xf9, 0x29, 0x24, 0x16, 0x5d, 0x85, 0x8d,
        0x76, 0x09, 0xbb, 0x05, 0x45, 0x10, 0x57, 0x67,
        0x8e, 0xa7, 0x54, 0x28, 0x8a, 0x69, 0x14, 0x07,
        0xe1, 0xaa, 0xb1, 0xa3, 0xd0, 0xe1, 0x78, 0xb9,
        0x11, 0xd5, 0x2c, 0xa9, 0x83, 0x48, 0x99, 0xf7,
        0x15, 0x2f, 0xf2, 0x0e, 0xf5, 0x6d, 0xd4, 0x85,
        0xfc, 0xf7, 0x6c, 0xe1, 0x21, 0x79, 0x09, 0x42,
        0x15, 0xc5, 0x8a, 0x81, 0x62, 0xda, 0xb9, 0xee,
        0x5c, 0x7d, 0xf9, 0xfe, 0xd3, 0x2d, 0xdd, 0x8c,
        0x9d, 0x44, 0x8c, 0xf7, 0x56, 0x19, 0x09, 0x9a,
        0x56, 0xe0, 0x33, 0xf4, 0x97, 0x7f, 0x15, 0x30,
        0x79, 0x4b, 0x20, 0x72, 0x32, 0x4e, 0xbd, 0x2b,
        0x19, 0x6e, 0xae, 0xee, 0x4e, 0x09, 0x42, 0x2e,
        0x01, 0x99, 0x03, 0x95, 0xd4, 0xf9, 0x93, 0xae,
        0x51, 0xa6, 0x41, 0xf9, 0x6c, 0x17, 0xbc, 0x63,
        0x01, 0x79, 0xf2, 0x82, 0x0a, 0x06, 0x00, 0x8e,
        0xef, 0x26, 0x08, 0x30, 0x32, 0xc5, 0x05, 0x51,
        0x81, 0x22, 0x3e, 0xf7, 0x0b, 0xf2, 0x7f, 0x43,
        0x22, 0x06, 0x8e, 0x5f, 0xdc, 0xcc, 0xa6, 0xfd,
        0xe2, 0x5d, 0xe4, 0x50, 0x11, 0x38, 0xcb, 0xea,
        0xa3, 0x67, 0x66, 0x81, 0xe2, 0x9e, 0x5c, 0x16,
        0x34, 0x08, 0x9d, 0x95, 0xe3, 0x6c, 0x0a, 0x33,
        0x4e, 0xaf, 0x16, 0x33, 0xe5, 0x4f, 0xa7, 0x83,
        0x21, 0x95, 0x2b, 0x65, 0xe4, 0x9a, 0xfc, 0x03,
        0x0e, 0xf9, 0x22, 0xd1, 0x01, 0x12, 0x46, 0xea,
        0x42, 0x0e, 0x4a, 0x8f, 0xeb, 0xd8, 0xd7, 0x22,
        0x98, 0x68, 0xcb, 0x6e, 0x8c, 0x65, 0x55, 0x41,
        0x66, 0xbd, 0xbf, 0x29, 0x32, 0x67, 0x13, 0x9a,
        0xdc, 0x1a, 0x41, 0x6e, 0xeb, 0xb6, 0x3e, 0xf7,
        0xb1, 0xf3, 0x63, 0xbe, 0xd3, 0xf3, 0xe0, 0x7b,
        0xcb, 0x22, 0x15, 0xb4, 0x49, 0xd8, 0x2c, 0xf7,
        0x90, 0xe9, 0x6a, 0xc4, 0xcf, 0x09, 0xcd, 0xb3,
        0x7b, 0x7e, 0x34, 0x91, 0x0e, 0x0e, 0xed, 0x15,
        0xc0, 0xd1, 0x99, 0xa4, 0x3d, 0x7c, 0x0a, 0x13,
        0xc5, 0x22, 0xb8, 0x4a, 0x2d, 0xd3, 0xa3, 0xfe,
        0x5c, 0x9c, 0xcf, 0x16, 0x4c, 0xcb, 0xed, 0x49,
        0x1c, 0x17, 0x1e, 0x51, 0x97, 0xc1, 0xc9, 0xec,
        0xf0, 0x0f, 0x77, 0x3b, 0xde, 0x3f, 0x36, 0xf6,
        0x38, 0x78, 0x5f, 0x85, 0xec, 0xc7, 0x2e, 0x80,
        0xf0, 0x56, 0xb7, 0x43, 0xd1, 0x0b, 0x3d, 0x5c,
        0xd1, 0x52, 0xf7, 0x18, 0x11, 0xd6, 0xf8, 0x32,
        0xba, 0x55, 0x69, 0x36, 0x4d, 0x5b, 0xfc, 0xbe,
        0x56, 0x7a, 0xfc, 0xfe, 0x11, 0xfe, 0xe2, 0x14,
        0x47, 0x41, 0x58, 0x41, 0xdb, 0x50, 0xdd, 0xef,
        0x4d, 0xf0, 0x27, 0x48, 0xb1, 0xd0, 0x8f, 0xe5,
        0xfa, 0xac, 0x5a, 0x3f, 0xe6, 0x89, 0x1d, 0x2c,
        0x76, 0xa2, 0xbc, 0x39, 0xb9, 0xe6, 0x25, 0xfc,
        0xc2, 0xb2, 0x11, 0x46, 0xa1, 0xe2, 0x7b, 0x15,
        0x46, 0x65, 0x3c, 0x26, 0xd2, 0x30, 0xe8, 0x68,
        0xe0, 0x2e, 0xb4, 0x0f, 0x6e, 0xf6, 0x28, 0xed,
        0xe0, 0x32, 0x14, 0x97, 0x1f, 0xaf, 0x0b, 0x70,
        0xa3, 0xaf, 0x37, 0xb3, 0xcc, 0x18, 0x52, 0x64,
        0xf7, 0x61, 0xc2, 0x9b, 0x55, 0xd2, 0x8c, 0x23,
        0x21, 0x54, 0x20, 0x5a, 0x0e, 0x54, 0xbe, 0xd0,
        0x43, 0x6f, 0x2d, 0xe8, 0xbd, 0x08, 0x9b, 0x48,
        0xe8, 0x72, 0xf8, 0x92, 0xce, 0x7b, 0x25, 0x07,
        0x64, 0x8c, 0xb8, 0x77, 0x56, 0xb9, 0x23, 0x23,
        0xc0, 0x93, 0xec, 0x6a, 0x94, 0x04, 0x27, 0xef,
        0x5e, 0x6f, 0x6d, 0xdf, 0x29, 0xbc, 0xf5, 0xfc,
        0x82, 0xee, 0x3b, 0xa4, 0x97, 0xe5, 0x4c, 0x35,
        0x6c, 0x92, 0xdc, 0x57, 0x94, 0xc8, 0x5e, 0xc5,
        0xbd, 0x7b, 0xa3, 0x59, 0xf8, 0xfb, 0xe1, 0x1a,
        0x8b, 0x8e, 0x9c, 0x03, 0xfa, 0xa1, 0xf5, 0x92,
        0xea, 0xd4, 0x6d, 0x37, 0xb1, 0x09, 0x07, 0x7c,
        0x22, 0xce, 0x8b, 0x85, 0x3b, 0xd5, 0xee, 0x4e,
        0x3c, 0xab, 0x81, 0xf1, 0x37, 0xa4, 0x17, 0xd8,
        0x93, 0xd9, 0xb4, 0x82, 0x07, 0x3f, 0x29, 0x63,
        0x6f, 0x43, 0xd1, 0xa0, 0x76, 0xeb, 0x5f, 0x3f,
        0xe6, 0xd1, 0xf6, 0xbb, 0x52, 0x17, 0x56, 0x60,
        0xce, 0x07, 0xe3, 0x23, 0xbe, 0x9b, 0x2d, 0x82,
        0x32, 0xc6, 0xfc, 0xef, 0x7f, 0x93, 0x19, 0x53,
        0xca, 0xe2, 0xad, 0xce, 0xaa, 0x46, 0x72, 0xb2,
        0x12, 0xf5, 0x59, 0x6e, 0xe3, 0x22, 0x8d, 0x25,
        0x97, 0xed, 0x8b, 0x33, 0x30, 0x2b, 0xdc, 0x3a,
        0xa6, 0xe9, 0x99, 0xa0, 0xa7, 0x11, 0x40, 0xd1,
        0x08, 0x53, 0x9b, 0xdb, 0x1f, 0x41, 0x7c, 0xb1,
        0xfa, 0xe0, 0x3c, 0xff, 0x66, 0x1e, 0x4a, 0x18,
        0x44, 0x60, 0xcd, 0xd2, 0x06, 0x15, 0xb2, 0x85,
        0x1a, 0x57, 0x58, 0x76, 0xb1, 0xc0, 0xb0, 0xde,
        0xb5, 0xca, 0x2b, 0x63, 0xb6, 0xef, 0x1c, 0xbe,
        0xf4, 0xf8, 0xe0, 0x17, 0xec, 0xc5, 0x08, 0xa8,
        0x85, 0x69, 0xd1, 0xbc, 0x28, 0x58, 0x80, 0x9e,
        0x61, 0x6c, 0x51, 0x1d, 0xef, 0x41, 0x97, 0x82,
        0x92, 0xb6, 0x32, 0x9c, 0x63, 0xa5, 0x69, 0x41,
        0x04, 0x13, 0xc9, 0xe8, 0xe7, 0x1e, 0x6a, 0x64,
        0xde, 0x86, 0x28, 0x05, 0xcd, 0x0a, 0x99, 0xee,
        0x09, 0x88, 0x53, 0xdb, 0x57, 0x4c, 0x5c, 0xb9,
        0x49, 0xb4, 0x3b, 0x29, 0x23, 0xfa, 0xd4, 0x3d,
        0x6f, 0x26, 0x28, 0x08, 0xac, 0x0a, 0xc7, 0xb0,
        0xe4, 0x0f, 0x3c, 0xb0, 0xea, 0x3b, 0xd0, 0x1d,
        0xc7, 0xfa, 0x0e, 0x20, 0x29, 0x3c, 0xf5, 0x1e,
        0x3a, 0x1f, 0x99, 0x6b, 0x5c, 0xed, 0xb6, 0xde,
        0x82, 0xba, 0x8e, 0x00, 0x47, 0xa7, 0x8f, 0xfb,
        0xa2, 0x2a, 0x25, 0x01, 0xe2, 0x36, 0x2d, 0xc2,
        0x71, 0x69, 0xa2, 0x09, 0x71, 0x0f, 0x90, 0xde,
        0xd2, 0x23, 0xaf, 0x9c, 0x4a, 0x93, 0xb4, 0xdc,
        0x8c, 0x90, 0x77, 0x2e, 0xf9, 0xbb, 0xc7, 0x23,
        0xb6, 0x8e, 0x26, 0xbd, 0xb9, 0xd5, 0xf9, 0x39,
        0x2c, 0x1e, 0x3f, 0x72, 0x04, 0xb9, 0xa6, 0xe1,
        0x6f, 0xc6, 0x2d, 0x80, 0x16, 0xa8, 0xe8, 0xea,
        0x29, 0x69, 0xb3, 0xd0, 0x61, 0x4b, 0xc7, 0x57,
        0xe3, 0x03, 0xf6, 0x20, 0x87, 0x09, 0x3d, 0xa8,
        0x51, 0x51, 0xea, 0x4d, 0x5e, 0xb8, 0x3c, 0x4b,
        0x2e, 0x0d, 0x81, 0xbb, 0x49, 0x44, 0xd1, 0x90,
        0xa4, 0xd4, 0xe7, 0x75, 0x76, 0x2a, 0x72, 0x5f,
        0xc2, 0x07, 0xb9, 0x6a, 0x86, 0xd0, 0x4d, 0x82,
        0x92, 0x41, 0x5e, 0x60, 0xdd, 0x46, 0x80, 0xcb,
        0xad, 0x57, 0x7a, 0x72, 0x45, 0x81, 0x34, 0xaf,
        0x61, 0x80, 0xdd, 0xb6, 0x3a, 0x9a, 0x76, 0xf7,
        0x96, 0xf7, 0x32, 0xcd, 0xb0, 0x31, 0xb6, 0x85,
        0x08, 0x9c, 0xfd, 0x77, 0x15, 0x2d, 0x0a, 0xa4,
        0x4f, 0x2d, 0xb1, 0x0e, 0x9e, 0x58, 0x7a, 0xad,
        0xf6, 0x9b, 0x59, 0x18, 0x78, 0xda, 0x7b, 0xbc,
        0xce, 0xcf, 0x0b, 0x39, 0xb6, 0x65, 0x3a, 0xc0,
        0x6d, 0x74, 0x54, 0xe8, 0x71, 0x79, 0xef, 0x35,
        0xaa, 0x72, 0xd3, 0x28, 0xe8, 0x0b, 0x50, 0x30,
        0xdf, 0xba, 0xf3, 0x37, 0xfc, 0xa8, 0x51, 0xfd,
        0xf4, 0x08, 0x24, 0x2e, 0x10, 0x93, 0xbc, 0xf1,
        0xa0, 0xeb, 0x9d, 0xd9, 0x14, 0x2e, 0xff, 0xce,
        0x56, 0x2c, 0xae, 0xe2, 0xc4, 0x5b, 0x96, 0xf0,
        0xad, 0x57, 0xc4, 0x44, 0xcc, 0xe2, 0x59, 0x74,
        0xbd, 0x61, 0x36, 0xe7, 0xcc, 0xfb, 0x51, 0xf6,
        0x2e, 0x58, 0x93, 0xd9, 0x6f, 0x82, 0xe8, 0x77,
        0x7f, 0x69, 0x36, 0x7f, 0x32, 0xa5, 0xa8, 0x20,
        0x28, 0xb4, 0x59, 0xe5, 0xc2, 0xad, 0x63, 0x20,
        0x2a, 0xbb, 0xcf, 0xd4, 0x87, 0x4e, 0x66, 0xd3,
        0x0b, 0x91, 0xae, 0x34, 0xcd, 0x5e, 0x9e, 0xde,
        0x54, 0x2d, 0x52, 0xde, 0x10, 0x22, 0x51, 0x6b,
        0x22, 0x94, 0xda, 0x7d, 0xd8, 0x23, 0x6f, 0x65,
        0x5c, 0x13, 0x8a, 0x8b, 0xed, 0x8f, 0xa3, 0xa7,
        0x99, 0x09, 0xb8, 0x89, 0xf3, 0xda, 0x20, 0xef,
        0xc6, 0x18, 0x7d, 0x54, 0x6c, 0xbb, 0x3c, 0xbe,
        0x92, 0x2c, 0xc6, 0x24, 0xfc, 0x07, 0x3d, 0x90,
        0x7b, 0xd8, 0xe7, 0x3f, 0x19, 0x69, 0x38, 0xfe,
        0x41, 0x15, 0x18, 0x7d, 0x86, 0x62, 0xe2, 0xd8,
        0x8d, 0x5c, 0x96, 0xc3, 0x7b, 0xf3, 0xe2, 0xb9,
        0x19, 0xe3, 0xae, 0x02, 0x1c, 0x83, 0x13, 0x50,
        0xa0, 0xd0, 0x4a, 0x87, 0xf5, 0x10, 0x3e, 0x64,
        0x18, 0x55, 0x8b, 0xe8, 0xc9, 0x64, 0x54, 0x59,
        0x03, 0x38, 0x7a, 0x65, 0x94, 0xac, 0x26, 0x8d,
        0x4d, 0x93, 0x0b, 0x26, 0x3f, 0x8e, 0xcd, 0x30,
        0x3f, 0x23, 0xf5, 0x10, 0xe8, 0xc2, 0x69, 0xcd,
        0x1c, 0x26, 0xc6, 0x5c, 0xff, 0xe5, 0x32, 0x3f,
        0x22, 0xde, 0x1d, 0x75, 0x7c, 0xea, 0xb3, 0x43,
        0x84, 0xb9, 0xed, 0x07, 0x35, 0xdc, 0x44, 0x62,
        0xeb, 0x9b, 0xf6, 0xa9, 0x3e, 0x52, 0x67, 0x3e,
        0x39, 0x5f, 0x59, 0xb3, 0xb5, 0xad, 0x8b, 0xe4,
        0x17, 0x36, 0xab, 0xcd, 0x3b, 0xa4, 0x79, 0x26,
        0xea, 0x84, 0x6f, 0xf7, 0xa9, 0x30, 0xa7, 0x25,
        0xb7, 0x68, 0xc5, 0x27, 0x5d, 0x35, 0x1c, 0x47,
        0x67, 0xd5, 0x07, 0x5e, 0x7e, 0xcb, 0x80, 0xab,
        0xe4, 0x27, 0x40, 0xa0, 0xda, 0xdd, 0xad, 0x6d,
        0xc7, 0xf2, 0x80, 0x07, 0xb1, 0xc4, 0x29, 0xfd,
        0xb5, 0x0f, 0x5b, 0xc9, 0xd8, 0xc0, 0x33, 0xe3,
        0x18, 0x65, 0xc9, 0xd1, 0x40, 0xfc, 0x1b, 0xac,
        0xb4, 0xc2, 0xf9, 0x35, 0x07, 0x2b, 0x79, 0x2d,
        0xf1, 0xe6, 0x57, 0xe7, 0xda, 0x67, 0x46, 0xb9,
        0xfb, 0x98, 0x98, 0xad, 0x2a, 0x71, 0xb5, 0xa9,
        0x08, 0xdd, 0x84, 0x3e, 0x9c, 0xeb, 0x6e, 0x35,
        0x3a, 0x3d, 0x7b, 0x19, 0x6b, 0x91, 0x1d, 0xd7,
        0x65, 0x1a, 0xee, 0x9a, 0x87, 0xbf, 0xc9, 0xc4,
        0x58, 0x5a, 0xe9, 0xa4, 0xc1, 0x4a, 0x6f, 0x5e,
        0x2a, 0x6a, 0xee, 0xd8, 0x17, 0x20, 0x04, 0xbf,
        0x74, 0x24, 0xfc, 0xf2, 0xd7, 0x88, 0x6f, 0x48,
        0xa5, 0x02, 0x7a, 0xa3, 0x1e, 0x0d, 0xff, 0xc5,
        0xbf, 0x46, 0x90, 0x6d, 0xe7, 0xf2, 0xfc, 0xd9,
        0x51, 0x0f, 0xdf, 0x33, 0x6e, 0x27, 0xdb, 0x51,
        0x58, 0x6b, 0x3b, 0x33, 0x16, 0x22, 0x7c, 0x65,
        0xdd, 0x6b, 0xfb, 0x11, 0xd7, 0xcf, 0x36, 0x72,
        0x24, 0x7f, 0x45, 0x75, 0x5f, 0x10, 0x07, 0x57,
        0xf8, 0x96, 0xe2, 0x4d, 0x3d, 0x3e, 0xbb, 0x39,
        0x81, 0x82, 0x06, 0x73, 0x43, 0x31, 0xe6, 0x30,
        0xdb, 0xdf, 0x0e, 0xc3, 0x97, 0x45, 0x0a, 0x0c,
        0xe6, 0x1e, 0x92, 0x1f, 0x76, 0x66, 0x13, 0x99,
        0xf6, 0xce, 0xcd, 0xcc, 0x97, 0xc8, 0x9d, 0x23,
        0x5b, 0x14, 0x45, 0xc8,
        0x58, 0x54, 0x7b, 0x26, 0xae, 0x1b, 0x09, 0x2d,
        0x70, 0xce, 0x97, 0xac, 0xcf, 0x20, 0xd9, 0x55,
        0x53, 0x2d, 0x3d, 0xd8, 0x6b, 0x3d, 0x2d, 0x89,
        0x17, 0x69, 0x37, 0xce, 0x4d, 0xe4, 0x0b, 0x02,
        0x18, 0xdd, 0xba, 0x75, 0x40, 0xaa, 0x56, 0x91,
        0xad, 0xf4, 0x5b, 0x89, 0xed, 0x45, 0xdd, 0x5a,
        0xd7, 0x9e, 0x8d, 0x9c, 0xcd, 0xb3, 0x3e, 0xdb,
        0x8f, 0xbe, 0xd1, 0x5e, 0xdb, 0x36, 0x61, 0xcc,
        0x21, 0xa9, 0xb2, 0x2e, 0xff, 0xf4, 0x3a, 0x58,
        0x81, 0xb4, 0x86, 0x4e, 0x91, 0x3a, 0xc3, 0xd1,
        0x66, 0xb8, 0xf7, 0x71, 0xb6, 0x78, 0xcc, 0x95,
        0xfd, 0x2f, 0xfe, 0x3c, 0x40, 0x7e, 0x0f, 0x3d,
        0xeb, 0x02, 0x82, 0x18, 0x57, 0xdb, 0x09, 0x18,
        0x5a, 0x16, 0x30, 0x31, 0x97, 0x20, 0x49, 0x91,
        0xdd, 0xfe, 0xcb, 0xa2, 0xe8, 0x75, 0xe1, 0x19,
        0x18, 0xf3, 0x21, 0x07, 0x74, 0x7d, 0x1f, 0xcc,
        0x94, 0x5e, 0xfa, 0x2e, 0xf7, 0xa8, 0x58, 0x5e,
        0x47, 0xf7, 0x75, 0xf1, 0x00, 0x52, 0x5d, 0x68,
        0xfa, 0x82, 0xb0, 0xde, 0x17, 0x6a, 0xc2, 0x0c,
        0x6c, 0xf9, 0x49, 0xc9, 0xd4, 0x6f, 0x51, 0x3f,
        0xf5, 0x72, 0x87, 0xe8, 0x88, 0xfb, 0xdb, 0xa6,
        0xb7, 0x9e, 0xed, 0x7c, 0xcd, 0x76, 0xdc, 0xa3,
        0x2a, 0x11, 0x18, 0x41, 0x7c, 0xf4, 0xb4, 0x99,
        0x2f, 0x7b, 0xdf, 0xbb, 0xf0, 0x1b, 0x5b, 0x9c,
        0x98, 0x22, 0x2a, 0xb6, 0xc3, 0xb3, 0x90, 0x69,
        0x53, 0x63, 0x02, 0x07, 0x4e, 0xfb, 0x21, 0x2e,
        0x95, 0x17, 0xc0, 0xc4, 0x61, 0x01, 0xbd, 0x6b,
        0xf9, 0xcb, 0x76, 0xba, 0x2a, 0xfd, 0x24, 0x3c,
        0x8d, 0xb7, 0x09, 0x2b, 0x46, 0xc4, 0x89, 0x61,
        0x27, 0x5b, 0x83, 0x6c, 0x9d, 0x71, 0xb2, 0x93,
        0xb7, 0xf9, 0xef, 0xf0, 0xc5, 0xb7, 0xcb, 0xd6,
        0x05, 0xb0, 0xfc, 0x9a, 0x61, 0x4d, 0x67, 0xd2,
        0xc5, 0xb7, 0x67, 0xc2, 0x52, 0x30, 0xd1, 0x98,
        0x77, 0x41, 0x3a, 0x4c, 0x13, 0x53, 0x96, 0x25,
        0xc7, 0x51, 0x0a, 0x12, 0x0c, 0x5d, 0xa1, 0xe4,
        0xfb, 0xbf, 0xe9, 0x33, 0xef, 0x9d, 0xd0, 0x62,
        0xe7, 0x6c, 0xa9, 0xdc, 0x69, 0x8a, 0x6e, 0xa0,
        0xa9, 0x43, 0xad, 0xfc, 0xd2, 0x07, 0xee, 0x86,
        0x08, 0x32, 0x61, 0x28, 0xc5, 0x74, 0xf4, 0x08,
        0x47, 0x2d, 0x97, 0xf6, 0xbb, 0x94, 0xb8, 0x10,
        0xed, 0xa7, 0x1a, 0xdc, 0x2c, 0x78, 0x46, 0xfd,
        0x55, 0x7c, 0x09, 0xac, 0x9e, 0x5d, 0x7f, 0xd7,
        0x5d, 0xb6, 0x1d, 0xb0, 0xca, 0xf4, 0x22, 0xae,
        0xbf, 0x8b, 0x25, 0x40, 0xe1, 0x44, 0x99, 0x68,
        0x12, 0x4c, 0x6e, 0xa6, 0x39, 0x1c, 0xe5, 0xca,
        0xf9, 0x2a, 0xe2, 0x3d, 0xca, 0xdf, 0x37, 0x93,
        0x87, 0x33, 0x9b, 0x4a, 0x56, 0xf3, 0x8b, 0x3f,
        0xf6, 0xb6, 0xf3, 0x50, 0xa0, 0x20, 0x57, 0xb5,
        0xda, 0xa0, 0x6f, 0x62, 0x1e, 0xd8, 0x20, 0x58,
        0x57, 0x0c, 0x99, 0x59, 0x26, 0x22, 0x8e, 0x27,
        0xfc, 0x72, 0x2b, 0xb7, 0x83, 0x42, 0xf0, 0x14,
        0x8b, 0xab, 0xdd, 0x62, 0x1b, 0x23, 0xae, 0xa1,
        0x97, 0x7f, 0x70, 0x0b, 0x18, 0x97, 0xf4, 0xc0,
        0xf8, 0xaa, 0x40, 0x8e, 0x52, 0x92, 0x5d, 0x6f,
        0x05, 0x7e, 0xc1, 0x26, 0xe5, 0xf7, 0x16, 0x2b,
        0x1c, 0xb9, 0xe1, 0xf4, 0x98, 0x89, 0x9f, 0x51,
        0xd1, 0x82, 0xf3, 0x7a, 0x7d, 0xf3, 0xaf, 0xd4,
        0x59, 0x41, 0x6d, 0x19, 0xd0, 0x17, 0x0a, 0x15,
        0xa0, 0x22, 0x73, 0x75, 0x3b, 0x0f, 0x8b, 0x85,
        0x44, 0xc4, 0xa2, 0x78, 0xe0, 0xb6, 0xca, 0x1c,
        0xa5, 0x30, 0x00, 0xda, 0xc5, 0x73, 0xf1, 0xd8,
        0xea, 0x75, 0xd4, 0x74, 0x1a, 0xea, 0xaf, 0x2c,
        0xdd, 0xcd, 0x19, 0x75, 0x0b, 0x41, 0x2b, 0xfe,
        0xbf, 0x95, 0x3e, 0xf4, 0x41, 0xc4, 0x92, 0x9a,
        0xcf, 0x8d, 0xbf, 0x64, 0x1a, 0x27, 0x2a, 0x65,
        0x95, 0x76, 0x75, 0x10, 0x3d, 0x0c, 0x53, 0xf7,
        0x67, 0x8f, 0x6a, 0xf9, 0x39, 0xe0, 0xe8, 0x78,
        0x0d, 0x4f, 0xd6, 0x9c, 0xba, 0xe9, 0x00, 0x52,
        0xb8, 0x93, 0x9e, 0xb5, 0x26, 0x0a, 0xfb, 0x80,
        0x01, 0xa9, 0x48, 0x74, 0x79, 0x31, 0xb9, 0x4e,
        0xf3, 0x4c, 0x65, 0xba, 0x7a, 0x07, 0x33, 0xaa,
        0x57, 0xf0, 0x09, 0x38, 0x2d, 0xa8, 0xa1, 0x1b,
        0xee, 0x6d, 0x95, 0xb5, 0xd5, 0xb2, 0xeb, 0x29,
        0x8c, 0x29, 0x8a, 0x57, 0x76, 0x9f, 0xc1, 0x47,
        0x34, 0xb5, 0x52, 0x61, 0x66, 0xf5, 0x4c, 0xf0,
        0x45, 0x23, 0x9f, 0x81, 0xec, 0x4a, 0xd7, 0xe2,
        0x0a, 0x0d, 0xa8, 0xc3, 0x6b, 0x27, 0x66, 0xb4,
        0x4b, 0xa5, 0x36, 0x71, 0x80, 0x3d, 0x3f, 0x78,
        0xd9, 0xe9, 0xb2, 0x64, 0x8d, 0xe1, 0x04, 0x34,
        0x2c, 0xc3, 0x7c, 0x70, 0xd6, 0xaa, 0x34, 0x07,
        0x7d, 0x5f, 0x7b, 0xb9, 0x96, 0x5f, 0xdd, 0x16,
        0xea, 0x9f, 0xb2, 0x09, 0x1f, 0xb6, 0x96, 0x6c,
        0x4f, 0x2f, 0xe6, 0xe5, 0xa5, 0xe1, 0xa5, 0xba,
        0xc1, 0xda, 0xe3, 0x8f, 0x31, 0xff, 0x96, 0x5a,
        0x2f, 0xde, 0x3c, 0xbe, 0xc4, 0x5b, 0xad, 0x6d,
        0xea, 0xf8, 0xbb, 0x3f, 0x51, 0x6a, 0x0a, 0x85,
        0x72, 0xfc, 0xe1, 0x17, 0x39, 0x86, 0xcf, 0x2e,
        0x34, 0xdf, 0x23, 0xf9, 0x2d, 0x1e, 0x85, 0x93,
        0x8a, 0xda, 0xad, 0x73, 0xd1, 0x2b, 0x22, 0x51,
        0xf9, 0x7d, 0x61, 0x52, 0x4a, 0xbc, 0x58, 0xe7,
        0x1d, 0xff, 0x5c, 0xbb, 0x22, 0x27, 0x5c, 0x84,
        0x33, 0x2a, 0x89, 0xb0, 0x07, 0x75, 0x11, 0xc4,
        0xd3, 0x58, 0x21, 0x26, 0x3f, 0x8c, 0x2c, 0x95,
        0xf2, 0xcf, 0x71, 0x94, 0x34, 0x53, 0xec, 0x24,
        0x19, 0xd9, 0x18, 0x02, 0xc9, 0x6d, 0xb9, 0x0d,
        0x06, 0x7b, 0xc4, 0x3f, 0x6e, 0x8d, 0xe2, 0x2b,
        0x35, 0x6c, 0xeb, 0xe8, 0x2b, 0x03, 0x97, 0xdb,
        0x44, 0x7c, 0x1d, 0x80, 0x83, 0x8d, 0xbb, 0x10,
        0xc6, 0xc9, 0xdd, 0xbf, 0x78, 0x2f, 0x24, 0x93,
        0xc8, 0xea, 0x83, 0xf2, 0x2d, 0xf2, 0x6e, 0xed,
        0x20, 0xf7, 0xe3, 0xbf, 0xc0, 0xc8, 0x52, 0x62,
        0xe4, 0x06, 0x79, 0xf2, 0xc2, 0x5c, 0x1b, 0xb6,
        0x54, 0x26, 0x2c, 0x6f, 0x91, 0x0f, 0x2a, 0x7a,
        0x77, 0xb1, 0xe8, 0x31, 0x84, 0x90, 0xf4, 0x4e,
        0xb2, 0x0d, 0x56, 0xc5, 0xc4, 0x93, 0x85, 0x13,
        0x09, 0x77, 0x26, 0x80, 0x40, 0xba, 0x16, 0x27,
        0xf2, 0xf7, 0xed, 0xfe, 0x8a, 0xaa, 0x9f, 0x75,
        0x73, 0x31, 0x92, 0x23 };


    BYTE *buf = (BYTE *)packet;
    size_t packet_size = sizeof(packet);

    char username_buffer[] = "FLARE ON 2019";
    DWORD username_size = strlen(username_buffer) + 1;

    _decrypt((BYTE*)buf, packet_size, (BYTE*)username_buffer, username_size, "keys.kdb");
    return true;
}

int main(int argc, char *argv[])
{
    g_CryptoDll = LoadLibraryA(CRYPTO_DLL);
    if (!g_CryptoDll) return -1;
    if (!init_func()) return -2;
#ifdef _TEST
    char test_buf[] = "This is my test buf This is my test bufThis is my test bufThis is my test bufThis is my test bufThis is my test bufThis is my test bufThis is my test bufThis is my test buf";

    c_buf b3 = { 0 };
    b3.in_size = sizeof(test_buf);
    b3.in_buf = (BYTE*)test_buf;

    bool ret = call_crypto(&b3);
    if (ret != S_OK) {
        std::cout << "Failed!\n";
        return -1;
    }
    dump_file("encrypted.bin", b3.out_buf, b3.out_size);

    decrypt(b3.out_buf, b3.out_size, "decoded.bin");
#endif
    std::cout << "Trying to decrypt the packet:\n";
    decrypt_pass_from_packet();
    decrypt_kdb_from_packet();
    system("pause");
    return 0;
}
